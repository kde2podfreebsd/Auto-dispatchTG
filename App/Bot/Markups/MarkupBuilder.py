import asyncio
import os

from telethon.tl.types import InputMediaPhoto 
from telebot import formatting
from telebot import types

from App.Database.DAL.AccountTgDAL import AccountDAL
from App.Database.DAL.AccountStoriesDAL import AccountStoriesDAL
from App.Database.DAL.AccountInstDAL import AccountInstDAL
from App.Database.DAL.ProxyDAL import ProxyAddressDAL
from App.Database.session import async_session

from App.UserAgent.Core import UserAgentCore

from App.Config import REDQUIRED_AMOUNT_OF_PROXIES

class MarkupBuilder(object):

    _change_status = None
    _adv_chat_added = None
    _sendAddAdvChatText = None
    _errorSetTargetChannel = None
    _prompt_edited: object = None
    _sendChangePromptText: object = None
    _message_edited: object = None
    _sendChangeAccountMessageText: object = None
    _changeAccountMsg: object = None
    _editAccountsMenuText: object = None
    _new_account_state1: object = None
    _hide_menu: object = None
    _welcome_text: object = None

    _change_aiosheduler_status = None
    _error_username_floodWait = None
    _launch_stories_text = None
    _change_status_account_inst = None
    _error_insufficient_amount_of_proxies = None


    @classmethod
    async def AccountListKeyboard(cls):
        async with async_session() as session:
            account_dal = AccountDAL(session)
            acc_out = await account_dal.getAllAccounts()
            ACCOUNTS = [
                {
                    "session_name": os.path.splitext(
                        os.path.basename(x.session_file_path)
                    )[0]
                }
                for x in acc_out
            ]

            mp = types.InlineKeyboardMarkup(row_width=2)

            for account in ACCOUNTS:
                mp.add(
                    types.InlineKeyboardButton(
                        text=account["session_name"],
                        callback_data=f"edit_account#{account['session_name']}",
                    )
                )

            mp.add(
                types.InlineKeyboardButton(
                    text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_tg"
                )
            )

            return mp

    @classmethod 
    def AccountListServices(cls):
        return types.InlineKeyboardMarkup(
            row_width=2,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        "üìù–°–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞",
                        callback_data="spam_tg"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üì∑–°–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞",
                        callback_data="spam_inst"
                    )
                ]
            ]
        )
    
    @classmethod
    async def AccountListKeyboardVisCfg(cls):
        async with async_session() as session:
            account_dal = AccountDAL(session)
            acc_out = await account_dal.getAllAccounts()
            ACCOUNTS = [
                {
                    "session_name": os.path.splitext(
                        os.path.basename(x.session_file_path)
                    )[0]
                }
                for x in acc_out
            ]

            mp = types.InlineKeyboardMarkup(row_width=2)

            for account in ACCOUNTS:
                mp.add(
                    types.InlineKeyboardButton(
                        text=account["session_name"],
                        callback_data=f"viscfg_account#{account['session_name']}",
                    )
                )

            mp.add(
                types.InlineKeyboardButton(
                    text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_tg"
                )
            )

            return mp
    
    @classmethod
    async def AccountListKeyboardStroies(cls):
        async with async_session() as session:
            account_dal = AccountDAL(session)
            acc_out = await account_dal.getAllAccounts()
            ACCOUNTS = [
                {
                    "session_name": os.path.splitext(
                        os.path.basename(x.session_file_path)
                    )[0]
                }
                for x in acc_out
            ]

            mp = types.InlineKeyboardMarkup(row_width=2)

            for account in ACCOUNTS:
                mp.add(
                    types.InlineKeyboardButton(
                        text=account["session_name"],
                        callback_data=f"acc_stories#{account['session_name']}",
                    )
                )

            mp.add(
                types.InlineKeyboardButton(
                    text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_tg"
                )
            )

            return mp

    @classmethod 
    def SpamTgActionsList(cls):
        return types.InlineKeyboardMarkup(
            row_width=2,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        "ü§ñ–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        callback_data="new_account_menu"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üé®–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∞–∫–∫–∞—É–Ω—Ç–∞",
                        callback_data="vis_cfg"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üí¨–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫—É",
                        callback_data="acc_edit"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîé–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–æ—Ä–∏–∑",
                        callback_data="stories_menu"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîô–ù–∞–∑–∞–¥",
                        callback_data="back_to_service_menu"
                    )
                ]
            ]
        )

    @classmethod
    def EditVisualOptions(cls, account_name):
        return types.InlineKeyboardMarkup(row_width=2,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        "–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", 
                        callback_data=f"chng_pfp#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "–ü–æ–º–µ–Ω—è—Ç—å first_name", 
                        callback_data=f"chng_first_name#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "–ü–æ–º–µ–Ω—è—Ç—å last_name", 
                        callback_data=f"chng_last_name#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "–ü–æ–º–µ–Ω—è—Ç—å username", 
                        callback_data=f"chng_username#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "–ü–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞", 
                        callback_data=f"chng_profile_desc#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîô–ù–∞–∑–∞–¥",
                        callback_data="back_to_vis_cfg"
                    )
                ]
            ]
        )
    
    @classmethod
    async def AccountStoriesListKeyboard(cls):
        async with async_session() as session:
            account_dal = AccountStoriesDAL(session)
            acc_out = await account_dal.getAllAccounts()
            ACCOUNTS = [
                {
                    "session_name": os.path.splitext(
                        os.path.basename(x.session_file_path)
                    )[0]
                }
                for x in acc_out
            ]

            mp = types.InlineKeyboardMarkup(row_width=2)

            for account in ACCOUNTS:
                mp.add(
                    types.InlineKeyboardButton(
                        text=account["session_name"],
                        callback_data=f"look_stories#{account['session_name']}",
                    )
                )

            mp.add(
                types.InlineKeyboardButton(
                    text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_tg"
                )
            )

            return mp

    @classmethod
    def StoriesMenu(cls, account_name):
        return types.InlineKeyboardMarkup(row_width=2,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        "üöÄ–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–æ—Ä–∏–∑", 
                        callback_data=f"stories_service#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üëÄ–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–∏–∑", 
                        callback_data=f"aiosheduler_stories#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                        callback_data=f"add_trgt_chnl#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "‚ûñ–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                        callback_data=f"delete_trgt_chnl#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîô–ù–∞–∑–∞–¥",
                        callback_data="back_to_stories_menu"
                    )
                ],
            ],
        )

    @classmethod
    async def showAccountStoriesActions(cls, account_name):
        async with async_session() as session:
            account_stories_dal = AccountStoriesDAL(session)
            account = await account_stories_dal.getAccountBySessionName(session_name=account_name)

            account_username = account.session_file_path.split("/")[-1].replace(".session", "")
            account_username = account_username.replace("_", "\\_")

            target_channels = ""
            if account.target_channels is not None and account.target_channels != []:
                amount_of_target_channels = len(account.target_channels)
                for x in account.target_channels:
                    y = x.replace("_", "\\_") if "." in x else x
                    if (account.target_channels.index(x) != amount_of_target_channels - 1):
                        target_channels += f"{y}\n"
                    else:
                        target_channels += f"{y}"
            else:
                target_channels = "ü§∑‚Äç‚ôÇÔ∏è–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"

            premium_chat_members = await account_stories_dal.getPremiumMemebers(
                account_stories_id=account.id
            )
            number_premium_chat_members = len(premium_chat_members)

            number_premium_chat_members_with_stories = await UserAgentCore(
                session_name=account_name
            ).numberOfActiveStories(premium_chat_members)

            accountStoriesActionsText = f"""
–ê–∫–∫–∞—É–Ω—Ç: {account_username}
üéØ–¢–∞—Ä–≥–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: 
------------------
{target_channels}
------------------
üíé–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {number_premium_chat_members}
üòé–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å —Å—Ç–æ—Ä–∏–∑: {number_premium_chat_members_with_stories}
"""

            def split_string(input_string, max_length=4000):
                result = []
                for i in range(0, len(input_string), max_length):
                    result.append(input_string[i : i + max_length])
                return result

            return split_string(accountStoriesActionsText)
    
    @classmethod
    async def showAccountStoriesAioschdeulerActions(cls, account_name):
        async with async_session() as session:
            account_stories_dal = AccountStoriesDAL(session)
            account = await account_stories_dal.getAccountBySessionName(session_name=account_name)

            account_username = account.session_file_path.split("/")[-1].replace(".session", "")
            account_username = account_username.replace("_", "\\_")

            accountStoriesActionsText = f"""
–ê–∫–∫–∞—É–Ω—Ç: {account_username}
–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö: {account.delay}
–°—Ç–∞—Ç—É—Å: {"–ê–∫—Ç–∏–≤–µ–Ω" if account.aioscheduler_status else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}
"""

            def split_string(input_string, max_length=4000):
                result = []
                for i in range(0, len(input_string), max_length):
                    result.append(input_string[i : i + max_length])
                return result

            return split_string(accountStoriesActionsText)

    @classmethod
    def AioshedulerStoriesMenu(cls, account_name):
        return types.InlineKeyboardMarkup(row_width=2,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        "‚è∞–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", 
                        callback_data=f"chng_delay#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîõ–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–∏–∑", 
                        callback_data=f"chng_status#{account_name}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîô–ù–∞–∑–∞–¥",
                        callback_data=f"back_to_look_stories#{account_name}"
                    )
                ],
            ],
        )

    @classmethod
    def AccountEditActions(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=3,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí¨–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        callback_data=f"change_acc_msg#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚úçÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å prompt –¥–ª—è YandexGPT",
                        callback_data=f"change_prompt#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚è∞–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É",
                        callback_data=f"change_delay#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —á–∞—Ç",
                        callback_data=f"add_adv_chat#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ûñ–£–±—Ä–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —á–∞—Ç",
                        callback_data=f"remove_adv_chat#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üéØ–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª",
                        callback_data=f"change_target_channel#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üÜô–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"change_status#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîÑ–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ YandexGPT",
                        callback_data=f"reload_chatgpt_message#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üóë–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        callback_data=f"delete_account#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", 
                        callback_data="back_to_acc_edit"
                    )
                ],
            ],
        )

    @classmethod
    async def AccountEditActions_text(cls, account_name):
        async with async_session() as session:
            account_dal = AccountDAL(session)
            account = await account_dal.getAccountBySessionName(
                session_name=account_name
            )

            advertising_channels = ""
            if account.advertising_channels is not None and account.advertising_channels != []:
                for x in account.advertising_channels:
                    y = x.replace("_", "\\_") if "_" in x else x
                    advertising_channels += f"{y}\n"
            else:
                advertising_channels = "ü§∑‚Äç‚ôÇÔ∏è–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"

            target_chat = (
                account.target_chat.replace("_", "\\_")
                if "_" in account.target_chat
                else account.target_chat
            )
            account_username = (
                os.path.splitext(os.path.basename(account.session_file_path))[
                    0
                ].replace("_", "\\_")
                if "_"
                in os.path.splitext(os.path.basename(account.session_file_path))[0]
                else os.path.splitext(os.path.basename(account.session_file_path))[0]
            )
            prompt = (
                account.prompt.replace("_", "\\_")
                if "_" in account.prompt
                else account.prompt
            )

            out_message = f"""
ü§ñ–ê–∫–∫–∞—É–Ω—Ç: {account_username}
üéØ–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_chat}
üÜô–°—Ç–∞—Ç—É—Å: {"–ê–∫—Ç–∏–≤–µ–Ω" if account.status else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}
‚è∞–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö: {account.delay}
‚úçÔ∏èYandexGPT prompt:
-------------------
{prompt}
-------------------
üí¨–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
-------------------

{account.message}

-------------------
üìù–ß–∞—Ç—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:
{advertising_channels}
"""
            print(out_message[62])

            def split_string(input_string, max_length=4000):
                result = []
                for i in range(0, len(input_string), max_length):
                    result.append(input_string[i : i + max_length])
                return result

            return split_string(out_message)
    
    @classmethod
    @property
    def hide_menu(cls):
        cls._hide_menu: object = types.ReplyKeyboardRemove()
        return cls._hide_menu

    @classmethod
    @property
    def welcome_text(cls):
        cls._welcome_text: object = formatting.format_text(
            formatting.mbold(
                "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º."
            ),
            "üî¢–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é",
            separator="\n",
        )
        return cls._welcome_text
    
    @classmethod
    def SpamInstActionsList(cls):
        return types.InlineKeyboardMarkup(
            row_width=2,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        "üö™–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º",
                        callback_data="logging_in_inst"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üí¨–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫—É",
                        callback_data="inst_acc_edit"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        "üîô–ù–∞–∑–∞–¥",
                        callback_data="back_to_service_menu"
                    )
                ]
            ]
        )
    
    @classmethod
    def AccountInstEditActions(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=3,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí¨–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        callback_data=f"change_acc_inst_msg#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ñ∂Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª–∑",
                        callback_data=f"add_reels_link#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚è∞–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É",
                        callback_data=f"chng_inst_delay#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏",
                        callback_data=f"add_proxy#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ûñ–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏",
                        callback_data=f"delete_proxy#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤",
                        callback_data=f"add_target_chat#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ûñ–£–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤",
                        callback_data=f"remove_target_chat#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîõ–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"chng_inst_status#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üóë–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        callback_data=f"delete_inst_account#{account_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", 
                        callback_data="back_to_inst_acc_edit"
                    )
                ],
            ],
        )



    @classmethod
    async def showAccountInstActions(cls, account_name):
        async with async_session() as session:
            account_inst_dal = AccountInstDAL(session)
            account = await account_inst_dal.getAccountBySessionName(session_name=account_name)
            
            account_username = account.session_file_path.split("/")[-1].replace(".cookies", "")
            account_username = account_username.replace("_", "\\_")

            target_channels = ""
            if account.target_channels is not None and account.target_channels != []:
                amount_of_target_channels = len(account.target_channels)
                for x in account.target_channels:
                    y = x.replace("_", "\\_") 
                    if (account.target_channels.index(x) != amount_of_target_channels - 1):
                        target_channels += f"{y}\n"
                    else:
                        target_channels += f"{y}"
            else:
                target_channels = "ü§∑‚Äç‚ôÇÔ∏è–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
            proxy_dal = ProxyAddressDAL(session)
            proxies = await proxy_dal.getProxyAddressById(
                account_inst_id=account.id
            )

            proxies_string = ""
            if proxies is not None and proxies != []:
                amount_of_proxies = len(proxies)
                for proxy in proxies:
                    _proxy = proxy.replace("_", "\\_")
                    if (proxies.index(proxy) != amount_of_proxies - 1):
                        proxies_string += f"{_proxy}\n"
                    else:
                        proxies_string += f"{_proxy}"
            else:
                proxies_string = "ü§∑‚Äç‚ôÇÔ∏è–ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–æ–≤"

            account_message = account.message.replace("_", "\\_")
            reels_link = account.reels_link.replace("_", "\\_")

            accountInstActionsText = f"""
ü§ñ–ê–∫–∫–∞—É–Ω—Ç: {account_username}
üîõ–°—Ç–∞—Ç—É—Å: {"–ê–∫—Ç–∏–≤–µ–Ω" if account.status else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}
‚è∞–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö: {account.delay}
üíæ–ü—Ä–æ–∫—Å–∏:
------------------------
{proxies_string}
------------------------
üéØ–ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: 
------------------------
{target_channels}
------------------------
üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∏–ª–∑:
{reels_link}
üí¨–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
------------------------
{account_message}
"""

            def split_string(input_string, max_length=4000):
                result = []
                for i in range(0, len(input_string), max_length):
                    result.append(input_string[i : i + max_length])
                return result

            return split_string(accountInstActionsText)

    @classmethod
    async def AccountInstListKeyboard(cls):
        async with async_session() as session:
            account_inst_dal = AccountInstDAL(session)
            acc_out = await account_inst_dal.getAllAccounts()
            ACCOUNTS_INST = [
                {
                    "session_name": os.path.splitext(
                        os.path.basename(x.session_file_path)
                    )[0]
                }
                for x in acc_out
            ]
            mp = types.InlineKeyboardMarkup(row_width=2)

            for account in ACCOUNTS_INST:
                mp.add(
                    types.InlineKeyboardButton(
                        text=account["session_name"],
                        callback_data=f"edit_inst_account#{account['session_name']}",
                    )
                )

            mp.add(
                types.InlineKeyboardButton(
                    text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_inst"
                )
            )

            return mp

    @classmethod
    @property
    def instLoggingInSuccessfullyText(cls):
        cls.instLoggingInSuccessfullyText = "‚úÖ<b>–õ–æ–≥–∏–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞ –ø—Ä–æ–∏–∑–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ</b>"
        return cls.instLoggingInSuccessfullyText
    
    @classmethod
    @property
    def loggingIn(cls):
        cls.loggingIn = "<i>–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–≥–∏–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ...</i>"
        return cls.loggingIn
    
    @classmethod
    @property
    def errorInstLoggingIn(cls):
        cls.errorInstLoggingIn = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞, –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –ª–æ–≥–∏–Ω–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑</b>"
        return cls.errorInstLoggingIn
    
    @classmethod
    @property
    def errorIncorrectPasswordOrLogin(cls):
        cls.erorrIncorrectPasswordOrLogin = "‚ùå<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ª–æ–≥–∏–Ω, –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –ª–æ–≥–∏–Ω–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑</b>"
        return cls.erorrIncorrectPasswordOrLogin
    
    @classmethod
    @property
    def errorSuspendedAccount(cls):
        cls.errorSuspendedAccount = "‚ùå<b>–ê–∫–∫–∞—É–Ω—Ç, —á—å–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤—ã –≤–≤–µ–ª–∏, –∑–∞–±–∞–Ω–µ–Ω</b>"
        return cls.errorSuspendedAccount

    @classmethod
    @property
    def errorExpiredProxy(cls):
        cls.errorExpiredProxy = "‚ùå<b>–£ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ª–æ–∏–≥–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç</b>"
        return cls.errorExpiredProxy
    
    @classmethod
    @property
    def errorCaptchaVerification(cls):
        cls.errorCaptchaVerification = "‚ùå<b>–î–ª—è –≤—Ö–æ–¥–∞ –≤ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –∫–∞–ø—á–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç.</b>"
        return cls.errorCaptchaVerification

    @classmethod
    @property
    def errorExpiredProxyDb(cls):
        cls.errorExpiredProxyDb = "‚ùå<b>–£ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∏—Å—Ç–∞–≥—Ä–∞–º</b>"
        return cls.errorExpiredProxyDb

    @classmethod
    @property
    def getInstAccountLogin(cls):
        cls.getInstAccountLogin = "<b>–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º:</b>"
        return cls.getInstAccountLogin

    @classmethod
    @property
    def getInstAccountPassword(cls):
        cls.getInstAccountPassword = "<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º:</b>"
        return cls.getInstAccountPassword
    
    @classmethod 
    @property 
    def getProxyAddress(cls):
        cls.getProxyAddress = "<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É: IP_ADDRESS:PORT:LOGIN:PASSWORD</b>"
        return cls.getProxyAddress 
    
    @classmethod 
    @property 
    def errorGetProxyAddress(cls):
        cls.errorGetProxyAddress = "‚ùå<b>–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –æ–±—Ä–∞–∑—Ü—É: IP_ADDRESS:PORT:LOGIN:PASSWORD.\n –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –µ—â–µ —Ä–∞–∑</b>"
        return cls.errorGetProxyAddress 
    
    
    @classmethod
    @property
    def sendUpdateMessageInstText(cls):
        cls.sendUpdateMessageInstText = "‚úâÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º:</b>"
        return cls.sendUpdateMessageInstText
    
    @classmethod
    @property
    def updatedMessageInstText(cls):
        cls.updatedMessageInstText = "‚úÖ<b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>"
        return cls.updatedMessageInstText
    
    @classmethod
    @property
    def sendAddTargetChannelText(cls):
        cls.sendAddTargetChannelText = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≤–∏–¥–µ username:</b>"
        return cls.sendAddTargetChannelText
    
    @classmethod
    @property
    def parsingFollowers(cls):
        cls.parsingFollowers = "<i>–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ...</i>"
        return cls.parsingFollowers

    @classmethod
    @property
    def addedInstTargetChannel(cls):
        cls.addedInstTargetChannel = "‚úÖ<b>–ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.addedInstTargetChannel
    
    @classmethod
    @property
    def errorTargetInstChat(cls):
        cls.errorTargetInstChat = "‚ùå<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (username), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorTargetInstChat
    
    @classmethod
    @property
    def errorDbTargetInstChannel(cls):
        cls.errorDbTargetInstChannel = "<b>‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>"
        return cls.errorDbTargetInstChannel
    
    @classmethod
    @property
    def errorDbNonExistentTargetInstChannel(cls):
        cls.errorDbNonExistentTargetInstChannel = "<b>‚ùå–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º</b>"
        return cls.errorDbNonExistentTargetInstChannel

    @classmethod
    @property
    def errorUpdatingInstMessage(cls):
        cls.errorUpdatingInstMessage = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.errorUpdatingInstMessage
    
    @classmethod
    @property
    def errorPageNotFound(cls):
        cls.errorPageNotFound = "‚ùå<b>Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–º: –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b>"
        return cls.errorPageNotFound

    @classmethod
    @property
    def sendRemoveTargetChannelText(cls):
        cls.sendRemoveTargetChannelText = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –≤ –≤–∏–¥–µ username:</b>"
        return cls.sendRemoveTargetChannelText
    
    @classmethod
    @property
    def removedInstTargetChannel(cls):
        cls.removedInstTargetChannel = "‚úÖ<b>–ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.removedInstTargetChannel
    
    @classmethod
    @property
    def errorTargetInstChannelRemoval(cls):
        cls.errorTargetInstChannelRemoval = "‚ùå</b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (username), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑ </b>"
        return cls.errorTargetInstChannelRemoval

    @classmethod
    @property
    def sendDeleteAccountInstText(cls):
        cls.sendDeleteAccountInstText = "<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç? –í–≤–µ–¥–∏—Ç–µ –î–ê, –¢–û–ß–ù–û –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>"
        return cls.sendDeleteAccountInstText
    
    @classmethod
    @property
    def deletedAccountInst(cls):
        cls.deletedAccountInst = "‚úÖ<b>–ê–∫–∫–∞—É–Ω—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.deletedAccountInst

    @classmethod
    @property
    def errorUnknownDeletionAccountCommand(cls):
        cls.errorUnknownDeletionAccountCommand = "‚ùå<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –î–ê, –¢–û–ß–ù–û –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏</b>"
        return cls.errorUnknownDeletionAccountCommand
    
    @classmethod
    @property
    def errorDbAccountInstRemoval(cls):
        cls.errorUnknownDeletionAccountCommand = "‚ùå<b>–ê–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏</b>"
        return cls.errorUnknownDeletionAccountCommand
    
    @classmethod
    @property
    def errorNoTargetInstChannels(cls):
        cls.errorNoTargetInstChannels =  "<b>‚ùå–ù–µ—Ç —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é \"‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤\"</b>"
        return cls.errorNoTargetInstChannels
    
    @classmethod
    @property
    def errorNoMessage(cls):
        cls.errorNoTargetInstChannels =  "<b>‚ùå–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é \"üí¨–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\"</b>"
        return cls.errorNoTargetInstChannels
    
    @classmethod
    @property
    def errorNoMessageAndNoReels(cls):
        cls.errorNoMessageAndNoReels = "<b>‚ùå–ù–µ—Ç –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∏–ª–∑ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∏–∑ —Å –ø–æ–º–æ—â—å—é \"üí¨–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\" –∏–ª–∏ \"‚ñ∂Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª–∑\"</b>"
        return cls.errorNoMessageAndNoReels

    @classmethod
    def errorInsufficientAmountOfProxies(cls, amount_of_proxies: int):
        cls._error_insufficient_amount_of_proxies = f"""<b>‚ùå–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏: {REDQUIRED_AMOUNT_OF_PROXIES}.
        \n–°–µ–π—á–∞—Å {amount_of_proxies}/{REDQUIRED_AMOUNT_OF_PROXIES}, –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Å –ø–æ–º–æ—â—å—é \"‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏\"</b>"""
        return cls._error_insufficient_amount_of_proxies
    
    @classmethod
    @property
    def errorInsufficientAmountOfProxiesForParsing(cls):
        cls.errorInsufficientAmountOfProxiesForParsing = "<b>‚ùå–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏. –î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é \"‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏\"</b>"
        return cls.errorInsufficientAmountOfProxiesForParsing
    
    @classmethod
    def changeStatusAccountInst(cls, status: bool):
        cls._change_status_account_inst = f"<b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}</b>"
        return cls._change_status_account_inst
    
    @classmethod
    @property
    def addProxyText(cls):
        cls.addProxyText = "<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É: IP_ADDRESS:PORT:LOGIN:PASSWORD</b>"
        return cls.addProxyText
    
    @classmethod
    @property
    def addingProxy(cls):
        cls.addingProxy = "<i>–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–∞, –æ–∂–∏–¥–∞–π—Ç–µ...</i>"
        return cls.addingProxy

    @classmethod
    @property
    def addedProxyText(cls):
        cls.addedProxyText = "‚úÖ<b>–ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.addedProxyText
    
    @classmethod
    @property
    def errorProxyAddress(cls):
        cls.errorProxyAddress = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.errorProxyAddress
    
    @classmethod
    @property
    def errorProxyAddressRemoval(cls):
        cls.errorProxyAddressRemoval = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.errorProxyAddressRemoval

    @classmethod
    @property
    def errorInvalidProxyAdress(cls):
        cls.errorInvalidProxyAdress = "‚ùå<b>–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –æ–±—Ä–∞–∑—Ü—É: IP_ADDRESS:PORT:LOGIN:PASSWORD.\n –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –µ—â–µ —Ä–∞–∑</b>"
        return cls.errorInvalidProxyAdress
    
    @classmethod
    @property
    def deleteProxyAddress(cls):
        cls.deleteProxyAddress = "<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—Ä–∞–∑—Ü—É: IP_ADDRESS:PORT:LOGIN:PASSWORD</b>"
        return cls.deleteProxyAddress
    
    @classmethod
    @property
    def deletedProxyAddress(cls):
        cls.deletedProxyAddress = "‚úÖ<b>–ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.deletedProxyAddress

    @classmethod
    @property
    def setDelayForInstText(cls):
        cls.setDelayForInstText = "<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –≤ –º–∏–Ω—É—Ç–∞—Ö:</b>"
        return cls.setDelayForInstText

    @classmethod
    @property
    def errorNotIntegerInstDelay(cls):
        cls.errorNotIntegerInstDelay = "‚ùå<b>–ó–∞–¥–µ—Ä–∂–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º</b>"
        return cls.errorNotIntegerInstDelay

    @classmethod
    @property
    def delayForInstBeenSetText(cls):
        cls.delayForInstBeenSetText = "<b>‚úÖ–ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>"
        return cls.delayForInstBeenSetText

    @classmethod
    @property
    def updateReelsLinkText(cls):
        cls.updateReelsLinkText = "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∏–ª–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>"
        return cls.updateReelsLinkText

    @classmethod
    @property
    def updatedReelsLinkText(cls):
        cls.updatedReelsLinkText = "‚úÖ<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∏–ª–∑ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.updatedReelsLinkText
    
    @classmethod
    @property
    def errorReelsLink(cls):
        cls.updatedReelsLinkText = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∏–ª–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.updatedReelsLinkText

    @classmethod
    @property
    def errorInvalidReelsLink(cls):
        cls.errorInvalidReelsLink = "‚ùå<b>–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–µ –Ω–∞ —Ä–∏–ª–∑: –ø–∞—Ç—Ç–µ—Ä–Ω \"https://www\.instagram\.com/reel/[\w\d_-]+/\?utm_source=ig_web_copy_link\"</b>"
        return cls.errorInvalidReelsLink

    @classmethod
    @property
    def errorDelayInst(cls):
        cls.errorDelayInst = "‚ùå<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.errorDelayInst


    @classmethod
    @property
    def spamInstText(cls):
        cls.spamInstText = "üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏ –∏–Ω—Å—Ç–∞—Ä–≥–∞–º"
        return cls.spamInstText

    @classmethod
    @property
    def sendUpdateMessageText(cls):
        cls.sendUpdateMessageText = "‚úâÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
        return cls.sendUpdateMessageText

    @classmethod
    @property
    def new_account_state1(cls):
        cls._new_account_state1 = "üì©–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∞–∫–∞—É–Ω—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>account_name.session</b>"
        return cls._new_account_state1

    @classmethod
    @property
    def spamTgText(cls):
        cls.spamTgText = "üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º"
        return cls.spamTgText
    
    @classmethod
    async def visualConfigText(cls, account_name, isProfilePicture):
        account = UserAgentCore(account_name)
        entity = await account.getMe()
        first_name = entity.first_name
        last_name = entity.last_name
        username = entity.username
        account_description = await account.getProfileBio(entity)

        if first_name:
            first_name = first_name.replace('_', '\\_')
        if last_name:
            last_name = last_name.replace('_', '\\_')
        if username:
            username = username.replace('_', '\\_')
        if account_description:
            account_description = account_description.replace('_', '\\_')

        visualConfigText = f"""
üåÑ–í–∏–∑–∞—É–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏
first name: {first_name}
second name: {last_name}
username: @{username}
account description: 
--------------------
{account_description}
--------------------
profile picture: {"" if isProfilePicture else "None"}
"""
        # print(visualConfigText)
        def split_string(input_string, max_length=4000):
                result = []
                for i in range(0, len(input_string), max_length):
                    result.append(input_string[i : i + max_length])
                return result
        return split_string(visualConfigText)

    @classmethod
    @property
    def changeProfileDescriptionText(cls):
        cls.storiesMenuText = "<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏:</b>"
        return cls.storiesMenuText

    @classmethod
    @property
    def profileDescriptionChangedText(cls):
        cls.storiesMenuText = "<b>‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>"
        return cls.storiesMenuText

    @classmethod
    @property
    def storiesMenuText(cls):
        cls.storiesMenuText = "üëÄ–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–æ—Ä–∏–∑"
        return cls.storiesMenuText

    @classmethod
    @property
    def editAccountsMenuText(cls):
        cls._editAccountsMenuText = "<b>ü§ñ–ê–∫–∫–∞–Ω—É—Ç—ã:</b>"
        return cls._editAccountsMenuText

    @classmethod
    @property
    def sendChangeAccountMessageText(cls):
        cls._sendChangeAccountMessageText = "üí¨<b>–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MARKDOWN —Ä–∞–∑–º–µ—Ç–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –±–∞–∑–æ–π –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ YandexGPT</b>"
        return cls._sendChangeAccountMessageText

    @classmethod
    @property
    def sendChangePromptText(cls):
        cls._sendChangePromptText = (
            "‚úçÔ∏è<b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –¥–ª—è prompt YandexGPT</b>"
        )
        return cls._sendChangePromptText

    @classmethod
    @property
    def message_edited(cls):
        cls._message_edited = "<b>‚úÖ–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ</b>"
        return cls._message_edited

    @classmethod
    @property
    def prompt_edited(cls):
        cls._prompt_edited = "<b>‚úÖ–¢–µ–∫—Å—Ç prompt –∏–∑–º–µ–Ω–µ–Ω–æ</b>"
        return cls._prompt_edited

    @classmethod
    @property
    def target_edited(cls):
        cls._target_edited = "<b>‚úÖ–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω</b>"
        return cls._target_edited

    @classmethod
    @property
    def sendChangePromptText(cls):
        cls._sendChangePromptText = "üéØ<b>–£–∫–∞–∂–∏—Ç–µ @username —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.</b>\n<i>–≠—Ç–æ—Ç @username –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ prompt –¥–ª—è YandexGPT</i>"
        return cls._sendChangePromptText
    
    @classmethod
    @property
    def sendChangeDelayText(cls):
        cls.sendChangeDelayText = "<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º:</b>"
        return cls.sendChangeDelayText
    
    @classmethod
    @property
    def errorNotIntegerDelayTg(cls):
        cls.errorNotIntegerDelayTg = "<b>‚ùå–ó–∞–¥–µ—Ä–∂–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º</b>"
        return cls.errorNotIntegerDelayTg

    @classmethod
    @property
    def delayForSpamTgHasBeenSet(cls):
        cls.delayForSpamTgHasBeenSet = "<b>‚úÖ–ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>"
        return cls.delayForSpamTgHasBeenSet

    @classmethod
    @property
    def errorNotAllFieldsFilledForYandexGPT(cls):
        cls.errorNotAllFieldsFilledForYandexGPT = "‚ùå<b>–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è YandexGPT.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—è \"YandexGPT prompt\", \"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª\" –∏ \"–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\" –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.</b>"
        return cls.errorNotAllFieldsFilledForYandexGPT

    @classmethod
    @property
    def errorSetTargetChannel(cls):
        cls._errorSetTargetChannel = "‚ùå<b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è @username –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"
        return cls._errorSetTargetChannel
    
    @classmethod
    @property
    def errorNonExistentAdvChat(cls):
        cls.errorNonExistentAdvChat = "<b>‚ùå–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏</b>"
        return cls.errorNonExistentAdvChat

    @classmethod
    @property
    def sendAddAdvChatText(cls):
        cls._sendAddAdvChatText = (
            "‚ûï<b>–£–∫–∞–∂–∏—Ç–µ @username —á–∞—Ç–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>"
        )
        return cls._sendAddAdvChatText

    @classmethod
    @property
    def adv_chat_added(cls):
        cls._adv_chat_added = "<b>‚úÖ–†–µ–∫–ª–∞–º–Ω—ã–π —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        return cls._adv_chat_added

    @classmethod
    @property
    def adv_chat_removed(cls):
        cls._adv_chat_removed = "‚úÖ<b>–†–µ–∫–ª–∞–º–Ω—ã–π —á–∞—Ç —É–¥–∞–ª–µ–Ω</b>"
        return cls._adv_chat_removed

    @classmethod
    @property
    def sendRemoveAdvChatText(cls):
        cls._sendRemoveAdvChatText = (
            "‚ûñ<b>–£–∫–∞–∂–∏—Ç–µ @username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤</b>"
        )
        return cls._sendRemoveAdvChatText

    @classmethod
    @property
    def ReloadedYandexGPTMessageText(cls):
        cls.ReloadedYandexGPTMessageText = "‚úÖ<b>–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>"
        return cls.ReloadedYandexGPTMessageText

    @classmethod
    @property
    def sendDeleteAccountText(cls):
        cls._sendDeleteAccountText = "üóë<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ù–∞–ø–∏—à–∏—Ç–µ: –î–ê, –¢–û–ß–ù–û - —á—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>"
        return cls._sendDeleteAccountText

    @classmethod
    @property
    def account_deleted(cls):
        cls._account_deleted = "‚úÖ<b>–ê–∫–∫–∞—É–Ω—Ç –∏ —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω—ã</b>"
        return cls._account_deleted

    @classmethod
    def not_ready_change_status(cls, status: bool):
        cls._change_status = f"‚ùå<b>–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: <b>{status}</b>"
        return cls._change_status

    @classmethod
    def ready_change_status(cls, status: bool):
        cls._change_status = f"‚úÖ<b>–ê–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: <b>{status}</b>"
        return cls._change_status

    @classmethod
    def change_status_menu(cls, session_name: str):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ–í–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        callback_data=f"set_status_on#{session_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ùå–í—ã–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        callback_data=f"set_status_off#{session_name}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_edit_menu#{session_name}"
                    )
                ],
            ],
        )


    @classmethod 
    def back_to_acc_edit(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_acc_edit"
                    )
                ]
            ],
        )

    @classmethod
    def back_to_spam_tg(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_tg"
                    )
                ]
            ],
        )
    
    @classmethod
    def back_to_spam_inst(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_spam_inst"
                    )
                ]
            ],
        )
    
    @classmethod
    def back_to_get_password(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_get_password"
                    )
                ]
            ],
        )

    @classmethod 
    def back_to_get_proxy(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_get_proxy"
                    )
                ]
            ],
        )

    @classmethod
    def back_to_edit_inst_account(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_edit_inst_account#{account_name}"
                    )
                ]
            ],
        )

    @classmethod
    def back_to_edit_menu(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_edit_menu#{account_name}"
                    )
                ]
            ],
        )
    
    @classmethod
    @property
    def back_to_inst_acc_edit(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_inst_acc_edit"
                    )
                ]
            ],
        )

    @classmethod
    def back_to_vis_cfg_menu(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_viscfg_account#{account_name}"
                    )
                ]
            ],
        )

    @classmethod
    def back_to_stories_menu(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_look_stories#{account_name}"
                    )
                ]
            ],
        )
    
    @classmethod
    def back_to_aiosheduler_stories(cls, account_name):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=
                        f"back_to_aiosheduler_stories#{account_name}"
                    )
                ]
            ],
        )

    @classmethod
    def back_to_logging_in_inst(cls):
        return types.InlineKeyboardMarkup(
            row_width=1,
            keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üîô–ù–∞–∑–∞–¥", callback_data=f"back_to_logging_in_inst"
                    )
                ]
            ],
        )
    
    
    @classmethod
    @property
    def addTargetChannelText(cls):
        cls.addTargetChannelText = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ @username:</b>"
        return cls.addTargetChannelText
    
    @classmethod
    def launchStoriesText(cls, stories_watched):
        cls._launch_stories_text = f"<b>‚úÖ–í—Å–µ–≥–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–∏–∑: {stories_watched}.</b>"
        return cls._launch_stories_text

    @classmethod
    @property
    def errorIncorrectTargetChannel(cls):
        cls.errorIncorrectTargetChannel = "<b>‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—ç–≥ –∫–∞–Ω–∞–ª–∞ (@username), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorIncorrectTargetChannel
   
    @classmethod
    @property
    def errorDbTargetChannel(cls):
        cls.errorDbTargetChannel = "<b>‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ target channel –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorDbTargetChannel
    
    @classmethod
    @property
    def errorTargetChannelAlreadyExists(cls):
        cls.errorDbTargetChannel = "<b>‚ùå–î–∞–Ω–Ω—ã–π target —Åhannel —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorDbTargetChannel
    
    @classmethod
    @property
    def errorNonExistentChannelUsername(cls):
        cls.errorNonExistentChannelUsername = "<b>‚ùå–í—ã –≤–≤–µ–ª–∏ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorNonExistentChannelUsername
    
    @classmethod
    @property
    def errorNoAdminPrivileges(cls):
        cls.errorNoAdminPrivileges = "<b>‚ùå–í—ã –≤–≤–µ–ª–∏ username –∫–∞–Ω–∞–ª–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorNoAdminPrivileges

    @classmethod
    @property
    def addedTargetChannelText(cls):
        cls.addedTargetChannelText = "<b>‚úÖ–¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∞—Å–∏–Ω–≥–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.addedTargetChannelText

    @classmethod
    @property
    def deleteTargetChannelText(cls):
        cls.deleteTargetChannelText = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –≤ –≤–∏–¥–µ @username:</b>"
        return cls.deleteTargetChannelText


    @classmethod
    @property
    def errorDbNonExistentTargetChannel(cls):
        cls.deleteTargetChannelText = "<b>‚ùå–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.deleteTargetChannelText

    @classmethod
    @property
    def deletedTargetChannelText(cls):
        cls.deletedTargetChannelText = "<b>‚úÖ–¢–∞—Ä–≥–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∞—Å–∏–Ω–≥–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>"
        return cls.deletedTargetChannelText

    @classmethod
    @property
    def setDelayForAioschedulerText(cls):
        cls.setDelayForAioscheduler = "<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–æ—Ä–∏–∑ –≤ –º–∏–Ω—É—Ç–∞—Ö:</b>"
        return cls.setDelayForAioscheduler
    
    @classmethod
    @property
    def errorNotIntegerDelay(cls):
        cls.errorNotIntegerDelay = "<b>‚ùå–ó–∞–¥–µ—Ä–∂–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–∏–∑</b>"
        return cls.errorNotIntegerDelay

    @classmethod
    @property
    def delayForAioschedulerBeenSetText(cls):
        cls.setDelayForAioscheduler = "<b>‚úÖ–ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–æ—Ä–∏–∑ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>"
        return cls.setDelayForAioscheduler
    
    @classmethod
    def changeStatusForAioschedulerText(cls, status: bool):
        cls._change_aiosheduler_status = f"<b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–∏–∑ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}</b>"
        return cls._change_aiosheduler_status
    
    @classmethod
    @property
    def errorAioscheduleStoriesActive(cls):
        cls.errorAioscheduleStoriesActive = "<b>‚ùå–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–∏–∑.\n –ü–æ–º–µ–Ω—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ \"üëÄ–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–∏–∑\"</b>"
        return cls.errorAioscheduleStoriesActive
    
    @classmethod
    @property
    def errorNoTargetChannels(cls):
        cls.errorNoTargetChannels = "<b>‚ùå–ù–µ—Ç —Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é \"‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\"</b>"
        return cls.errorNoTargetChannels

    @classmethod
    @property
    def editFirstNameText(cls):
        cls.editFirstNameText = "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å first_name —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏:</b>"
        return cls.editFirstNameText

    @classmethod
    @property
    def editLastNameText(cls):
        cls.editLastNameText = "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å last_name —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏:</b>"
        return cls.editLastNameText
    
    @classmethod
    @property
    def editUsernameText(cls):
        cls.editUsernameText = "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å username —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏:</b>"
        return cls.editUsernameText
    
    @classmethod
    @property
    def profilePictureChangedText(cls):
        cls.profilePictureChangedText = "<b>‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>"
        return cls.profilePictureChangedText

    @classmethod
    @property
    def usernameChangedText(cls):
        cls.usernameChangedText = "<b>‚úÖ Username –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω</b>"
        return cls.usernameChangedText

    @classmethod
    @property
    def errorUsernameTaken(cls):
        cls.errorUsernameTaken = "<b>‚ùå Username, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏, —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞</b>"
        return cls.errorUsernameTaken
    
    @classmethod
    def errorUsernameFloodWait(cls, time_left):
        cls._error_username_floodWait = f"<b>‚ùå –í—ã –∏–∑–º–µ–Ω—è–ª–∏ —Å–≤–æ–π username —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è. –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è username –æ—Å—Ç–∞–ª–æ—Å—å {time_left} —Å–µ–∫—É–Ω–¥</b>"
        return cls._error_username_floodWait

    @classmethod
    @property
    def errorSameUsername(cls):
        cls.errorSameUsername = "<b>‚ùå Username, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞</b>"
        return cls.errorSameUsername
    
    @classmethod
    @property
    def changeProfilePictureText(cls):
        cls.changeProfilePictureText = "<b>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg, .jpeg –∏–ª–∏ .png, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞:</b>"
        return cls.changeProfilePictureText
    
    @classmethod
    @property
    def errorProfilePicture(cls):
        cls.changeProfilePictureText = "<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞</b>"
        return cls.changeProfilePictureText


